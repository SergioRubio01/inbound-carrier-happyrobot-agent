"""Remove calls table and infrastructure

Revision ID: 909554643437
Revises: 004_remove_load_fields
Create Date: 2025-08-21 08:50:35.954141

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "909554643437"
down_revision: Union[str, None] = "004_remove_load_fields"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Remove call_id foreign key from negotiations table if it exists
    try:
        op.drop_constraint(
            "negotiations_call_id_fkey", "negotiations", type_="foreignkey"
        )
    except Exception:
        pass  # Constraint may not exist

    # Drop call_id column if it exists
    try:
        op.drop_column("negotiations", "call_id")
    except Exception:
        pass  # Column may not exist

    # Drop index if it exists - using execute to handle non-existence gracefully
    op.execute("DROP INDEX IF EXISTS ix_negotiations_call_id")

    # Drop the entire calls table and all its indexes if it exists
    op.execute("DROP TABLE IF EXISTS calls CASCADE")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Recreate calls table (based on original schema)
    op.create_table(
        "calls",
        sa.Column("call_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("external_call_id", sa.String(length=100), nullable=True),
        sa.Column("session_id", sa.String(length=100), nullable=True),
        sa.Column("mc_number", sa.String(length=20), nullable=True),
        sa.Column("carrier_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("caller_phone", sa.String(length=20), nullable=True),
        sa.Column("caller_name", sa.String(length=100), nullable=True),
        sa.Column("load_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column(
            "multiple_loads_discussed",
            postgresql.ARRAY(postgresql.UUID(as_uuid=True)),
            nullable=True,
        ),
        sa.Column("start_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("end_time", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("duration_seconds", sa.Integer(), nullable=True),
        sa.Column("call_type", sa.String(length=30), nullable=False),
        sa.Column("channel", sa.String(length=30), nullable=True),
        sa.Column("agent_type", sa.String(length=30), nullable=True),
        sa.Column("agent_id", sa.String(length=50), nullable=True),
        sa.Column("outcome", sa.String(length=50), nullable=False),
        sa.Column(
            "outcome_confidence", sa.NUMERIC(precision=3, scale=2), nullable=True
        ),
        sa.Column("sentiment", sa.String(length=20), nullable=True),
        sa.Column("sentiment_score", sa.NUMERIC(precision=3, scale=2), nullable=True),
        sa.Column(
            "sentiment_breakdown",
            postgresql.JSONB(),
            nullable=True,
        ),
        sa.Column("initial_offer", sa.NUMERIC(precision=10, scale=2), nullable=True),
        sa.Column("final_rate", sa.NUMERIC(precision=10, scale=2), nullable=True),
        sa.Column("rate_accepted", sa.Boolean(), nullable=True),
        sa.Column("extracted_data", postgresql.JSONB(), nullable=True),
        sa.Column("transcript", sa.Text(), nullable=True),
        sa.Column("transcript_summary", sa.Text(), nullable=True),
        sa.Column("key_points", postgresql.ARRAY(sa.Text()), nullable=True),
        sa.Column("transferred_to_human", sa.Boolean(), nullable=True),
        sa.Column("transfer_reason", sa.String(length=100), nullable=True),
        sa.Column("transferred_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("assigned_rep_id", sa.String(length=50), nullable=True),
        sa.Column("follow_up_required", sa.Boolean(), nullable=True),
        sa.Column("follow_up_reason", sa.Text(), nullable=True),
        sa.Column("follow_up_deadline", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("follow_up_completed", sa.Boolean(), nullable=True),
        sa.Column("recording_url", sa.Text(), nullable=True),
        sa.Column("recording_duration_seconds", sa.Integer(), nullable=True),
        sa.Column("quality_score", sa.Integer(), nullable=True),
        sa.Column("quality_issues", postgresql.ARRAY(sa.Text()), nullable=True),
        sa.Column("created_by", sa.String(length=100), nullable=True),
        sa.Column("version", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["carrier_id"],
            ["carriers.carrier_id"],
        ),
        sa.ForeignKeyConstraint(
            ["load_id"],
            ["loads.load_id"],
        ),
        sa.PrimaryKeyConstraint("call_id"),
    )

    # Recreate indexes for calls table
    op.create_index(
        "ix_calls_external_call_id", "calls", ["external_call_id"], unique=False
    )
    op.create_index("ix_calls_mc_number", "calls", ["mc_number"], unique=False)
    op.create_index("ix_calls_carrier_id", "calls", ["carrier_id"], unique=False)
    op.create_index("ix_calls_caller_phone", "calls", ["caller_phone"], unique=False)
    op.create_index("ix_calls_load_id", "calls", ["load_id"], unique=False)
    op.create_index("ix_calls_start_time", "calls", ["start_time"], unique=False)
    op.create_index("ix_calls_end_time", "calls", ["end_time"], unique=False)
    op.create_index("ix_calls_outcome", "calls", ["outcome"], unique=False)
    op.create_index("ix_calls_sentiment", "calls", ["sentiment"], unique=False)
    op.create_index(
        "ix_calls_transferred_to_human", "calls", ["transferred_to_human"], unique=False
    )
    op.create_index(
        "ix_calls_follow_up_required", "calls", ["follow_up_required"], unique=False
    )

    # Add back call_id column to negotiations table
    op.add_column(
        "negotiations",
        sa.Column("call_id", postgresql.UUID(as_uuid=True), nullable=True),
    )
    op.create_index(
        "ix_negotiations_call_id", "negotiations", ["call_id"], unique=False
    )
    op.create_foreign_key(
        "negotiations_call_id_fkey", "negotiations", "calls", ["call_id"], ["call_id"]
    )
    # ### end Alembic commands ###
