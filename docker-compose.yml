services:
  postgres:
    image: postgres:15-alpine
    container_name: happyrobot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      PGDATA: /var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=80MB
      -c max_wal_size=1GB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - happyrobot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h ${POSTGRES_HOST}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: happyrobot-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@local.host"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - happyrobot-network
    depends_on:
      postgres:
        condition: service_healthy

  # HappyRobot API service
  happyrobot-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: happyrobot-api
    restart: unless-stopped
    environment:
      # Database credentials for alembic
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # API Key for endpoint security
      API_KEY: ${API_KEY:-dev-local-api-key}
      # JWT configuration
      JWT_SECRET_KEY: your-super-secret-jwt-key-change-this-in-production
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      JWT_ALGORITHM: HS256
      # Frontend URL for OAuth redirects
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      # AWS
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-eu-south-2}
      # Logging configuration
      LOG_LEVEL: INFO
      # Python path for application
      PYTHONPATH: /app

    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - happyrobot-network
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # HappyRobot Frontend (Next.js)
  happyrobot-frontend:
    build:
      context: ./web_client
      dockerfile: Dockerfile.dev
    container_name: happyrobot-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Development mode
      NODE_ENV: development
    volumes:
      # Mount source code for hot reload in development
      - ./web_client:/app
      - /app/node_modules
      - /app/.next
    networks:
      - happyrobot-network
    depends_on:
      - happyrobot-api
    develop:
      watch:
        - action: sync
          path: ./web_client
          target: /app
          ignore:
            - node_modules/
            - .next/


volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  happyrobot-network:
    driver: bridge
