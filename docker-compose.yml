services:
  postgres:
    image: postgres:15-alpine
    container_name: happyrobot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      PGDATA: /var/lib/postgresql/data
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=80MB
      -c max_wal_size=1GB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - happyrobot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h ${POSTGRES_HOST}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: happyrobot-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@local.host}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - happyrobot-network
    depends_on:
      postgres:
        condition: service_healthy

  # HappyRobot API service
  happyrobot-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: happyrobot-api
    restart: unless-stopped
    environment:
      # Database credentials for alembic
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # API Key for endpoint security
      API_KEY: ${API_KEY:-dev-local-api-key}
      # AWS
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-eu-south-2}
      # Logging configuration
      LOG_LEVEL: INFO
      # HTTPS configuration
      ENABLE_HTTPS: ${ENABLE_HTTPS:-false}
      ENVIRONMENT: ${ENVIRONMENT:-dev}
      # Python path for application
      PYTHONPATH: /app

    # Remove external port exposure - now accessed through nginx
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - happyrobot-network
    volumes:
      - .:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy for HTTPS support
  nginx:
    image: nginx:1.25-alpine
    container_name: happyrobot-nginx
    restart: unless-stopped
    ports:
      - "80:80"    # HTTP (redirects to HTTPS)
      - "443:443"  # HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      happyrobot-api:
        condition: service_healthy
    networks:
      - happyrobot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s



volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  happyrobot-network:
    driver: bridge
