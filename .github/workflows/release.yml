name: Release and Tag Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (auto-calculates version)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
          - manual
      manual_version:
        description: 'Manual version (only when release_type is "manual", e.g., 1.0.0)'
        required: false
        type: string
      prerelease_identifier:
        description: 'Prerelease identifier (alpha, beta, rc) - only for prerelease'
        required: false
        type: string
        default: ''

jobs:
  create-release:
    name: Create Release and Tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version
        id: version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Parse version from latest tag
          VERSION="${LATEST_TAG#v}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "${VERSION%-*}"

          # Determine new version based on release type
          case "${{ inputs.release_type }}" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              echo "📈 Major release: ${VERSION} → ${NEW_VERSION}"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              echo "📊 Minor release: ${VERSION} → ${NEW_VERSION}"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              echo "🔧 Patch release: ${VERSION} → ${NEW_VERSION}"
              ;;
            prerelease)
              if [ -n "${{ inputs.prerelease_identifier }}" ]; then
                NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))-${{ inputs.prerelease_identifier }}.1"
              else
                NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))-rc.1"
              fi
              echo "🧪 Prerelease: ${VERSION} → ${NEW_VERSION}"
              ;;
            manual)
              if [ -z "${{ inputs.manual_version }}" ]; then
                echo "❌ Error: Manual version is required when release_type is 'manual'"
                exit 1
              fi
              NEW_VERSION="${{ inputs.manual_version }}"
              echo "✏️ Manual version: ${NEW_VERSION}"
              ;;
            *)
              echo "❌ Error: Unknown release type: ${{ inputs.release_type }}"
              exit 1
              ;;
          esac

          # Add v prefix for tag
          TAG="v${NEW_VERSION}"

          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "New version: ${NEW_VERSION}"
          echo "New tag: ${TAG}"

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -n "$LATEST_TAG" ]; then
            COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Group commits by type
          cat > CHANGELOG_TEMP.md << EOF
          ## What's Changed

          ### Features
          $(echo "$COMMITS" | grep -E "^- (feat|feature):" || echo "No new features")

          ### Bug Fixes
          $(echo "$COMMITS" | grep -E "^- (fix|bugfix):" || echo "No bug fixes")

          ### Improvements
          $(echo "$COMMITS" | grep -E "^- (refactor|perf|improve):" || echo "No improvements")

          ### Documentation
          $(echo "$COMMITS" | grep -E "^- (docs|doc):" || echo "No documentation changes")

          ### Other Changes
          $(echo "$COMMITS" | grep -vE "^- (feat|feature|fix|bugfix|refactor|perf|improve|docs|doc):" || echo "No other changes")

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${{ steps.version.outputs.tag }}
          EOF

          # Save changelog for release notes
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push tag
        run: |
          git tag -a ${{ steps.version.outputs.tag }} -m "Release ${{ steps.version.outputs.version }}"
          git push origin ${{ steps.version.outputs.tag }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

      - name: Update version in pyproject.toml
        run: |
          # Update version in pyproject.toml if it exists
          if [ -f "pyproject.toml" ]; then
            sed -i "s/^version = .*/version = \"${{ steps.version.outputs.version }}\"/" pyproject.toml

            # Commit version update
            git add pyproject.toml
            git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No version changes to commit"
            git push origin HEAD
          fi

  trigger-deployment:
    name: Trigger Deployment
    needs: create-release
    runs-on: ubuntu-latest
    if: success() && !contains(needs.create-release.outputs.version, '-')
    permissions:
      actions: write
      contents: read

    steps:
      - name: Trigger deployment workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: '${{ needs.create-release.outputs.tag }}',
              inputs: {
                environment: 'dev'
              }
            });

      - name: Deployment notification
        run: |
          echo "🚀 Deployment triggered for version ${{ needs.create-release.outputs.version }}"
          echo "Tag: ${{ needs.create-release.outputs.tag }}"
